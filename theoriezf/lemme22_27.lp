require open zf.theoriezf.logique;
require open zf.theoriezf.lemme1_6;
require open zf.theoriezf.lemme7_13;
require open zf.theoriezf.lemme14_18;
require open zf.theoriezf.lemme19_21;

opaque symbol lemme22 : Π (P : Graph → Prop), π(∀ g (λ a, ∀ n (λ x, ∀ n (λ y', (eta (comp a P) x (i y') ⇔ (∃ n (λ y, (x = i y) ∧ (eta a y y'))))))))
≔ begin
assume P;
assume a x y;
apply and_i;
assume H;
apply or_e _ _ _ H _ _;
assume H1;
apply ExElim n _ H1 _; 
assume z Hz;
apply ExElim n _ Hz _; 
assume y' Hy';
apply ExIntro n z _ _;
apply and_i;
apply and_eg _ _ (and_eg _ _ Hy');
apply imp_i (y = y') _ _ _;
assume H2;
apply imp_i (y' = y) _ _ _;
assume H3;
apply H3 (λ w, eta a z w) (and_ed _ _ Hy');
apply lemmeSymEg _ _ H2;
apply lemme9 _ _ (and_ed _ _ (and_eg _ _ Hy'));
assume H4;
apply f_e _ _;
apply ExElim n _ H4 _; 
assume z Hz;
apply lemme11 y (and_ed _ _ (and_eg _ _ (and_eg _ _ Hz)));
assume H;
apply ExElim n _ H _;
assume z Hz;
apply or_ig;
apply ExIntro n z _ _;
apply ExIntro n y _ _;
apply and_i _ _ (and_i _ _ (and_eg _ _ Hz) (lemme1 (i y))) (and_ed _ _ Hz);
end;

opaque symbol lemme23 : Π (P : Graph → Prop), π(∀ g (λ a, ∀ n (λ x, (eta (comp a P) x o ⇔ (∃ n (λ y, (x = i y) ∧ (eta a y (root a)) ∧ (P (cr a y))))))))
≔ begin
assume P;
assume a x;
apply and_i;
assume H;
apply or_e _ _ _ H _ _;
assume H1;
apply f_e _ _;
apply ExElim n _ H1 _; 
assume y Hy;
apply ExElim n _ Hy _; 
assume y' Hy';
apply lemme11 y' (lemmeSymEg _ _ (and_ed _ _ (and_eg _ _ Hy')));
assume H2;
apply ExElim n _ H2 _;
assume y Hy;
apply ExIntro n y _ _;
apply and_i;
apply and_i;
apply and_eg _ _ (and_eg _ _ (and_eg _ _ Hy));
apply and_ed _ _ (and_eg _ _ Hy);
apply and_ed _ _ Hy;
assume H;
apply ExElim n _ H _;
assume y Hy;
apply or_id;
apply ExIntro n y _ _;
apply and_i;
apply and_i;
apply and_i _ _ (and_eg _ _ (and_eg _ _ Hy)) (lemme1 o);
apply and_ed _ _ (and_eg _ _ Hy);
apply and_ed _ _ Hy;
end;

opaque symbol lemme24 : π(∀ n (λ x, ∀ n (λ y', (eta omega x (i y')) ⇔ (∃ n (λ y, (x = i y) ∧ (y < y'))))))
≔ begin
assume x y';
apply and_i;
assume H;
apply or_e _ _ _ H _ _;
assume H1;
apply ExElim n _ H1 _; 
assume y Hy;
apply ExElim n _ Hy _; 
assume z Hz;
apply ExIntro n y _ _;
apply and_i;
apply and_eg _ _ (and_eg _ _ Hz);
apply imp_i (y' = z) _ _ _;
assume H2;
apply imp_i (z = y') _ _ _;
assume H3;
apply H3 (λ w, y < w) (and_ed _ _ Hz);
apply lemmeSymEg _ _ H2;
apply lemme9 _ _ (and_ed _ _ (and_eg _ _ Hz));
assume H4;
apply f_e _ _;
apply ExElim n _ H4 _; 
assume y Hy;
apply lemme11 y' (and_ed _ _ (and_eg _ _ Hy));
assume H;
apply ExElim n _ H _;
assume y Hy;
apply or_ig;
apply ExIntro n y _ _;
apply ExIntro n y' _ _;
apply and_i;
apply and_i;
apply and_eg _ _ Hy;
apply lemme1 (i y');
apply and_ed _ _ Hy;
end;

opaque symbol lemme25 : π(∀ n (λ x, (eta omega x o) ⇔ (∃ n (λ y, (x = i y) ∧ (Nat y)))))
≔ begin
assume x;
apply and_i;
assume H;
apply or_e _ _ _ H _ _;
assume H1;
apply f_e _ _;
apply ExElim n _ H1 _; 
assume y Hy;
apply ExElim n _ Hy _; 
assume y' Hy';
apply lemme11 y' (lemmeSymEg _ _ (and_ed _ _ (and_eg _ _ Hy')));
assume H2;
apply ExElim n _ H2 _;
assume y Hy;
apply ExIntro n y _ _;
apply and_i;
apply and_eg _ _ (and_eg _ _ Hy);
apply and_ed _ _ Hy;
assume H;
apply ExElim n _ H _;
assume y Hy;
apply or_id;
apply ExIntro n y _ _;
apply and_i;
apply and_i;
apply and_eg _ _ Hy;
apply lemme1 o;
apply and_ed _ _ Hy;
end;

opaque symbol lemme26 : π(∀ g (λ a, ∀ n (λ x, ∀ n (λ y', (eta (Cl a) x (i y')) ⇔ (∃ n (λ y, (x = i y) ∧ (eta a y y')))))))
≔ begin
assume a x y';
apply and_i;
assume H;
apply or_e _ _ _ H _ _;
assume H1;
apply ExElim n _ H1 _; 
assume y Hy;
apply ExElim n _ Hy _; 
assume z Hz;
apply ExIntro n y _ _;
apply and_i;
apply and_eg _ _ (and_eg _ _ Hz);
apply imp_i (y' = z) _ _ _;
assume H2;
apply imp_i (z = y') _ _ _;
assume H3;
apply H3 (λ w, eta a y w) (and_ed _ _ Hz);
apply lemmeSymEg _ _ H2;
apply lemme9 _ _ (and_ed _ _ (and_eg _ _ Hz));
assume H4;
apply f_e _ _;
apply ExElim n _ H4 _; 
assume y Hy;
apply lemme11 y' (and_ed _ _ (and_eg _ _ Hy));
assume H;
apply ExElim n _ H _;
assume y Hy;
apply or_ig;
apply ExIntro n y _ _;
apply ExIntro n y' _ _;
apply and_i;
apply and_i;
apply and_eg _ _ Hy;
apply lemme1 (i y');
apply and_ed _ _ Hy;
end;

opaque symbol lemme27 : π(∀ g (λ a, ∀ n (λ x, (eta (Cl a) x o) ⇔ (∃ n (λ y, ((x = i y) ∧ (∀ class (λ c, (∀ n (λ z, (eta a z (root a)) ⇒ (c z))) ∧ (∀ n (λ z, ∀ n (λ z', (((eta a z z') ∧ (c z') ⇒ (c z)) ⇒ c y))))))))))))
≔ begin
assume a x;
apply and_i;
assume H;
apply or_e _ _ _ H _ _;
assume H1;
apply f_e _ _;
apply ExElim n _ H1 _; 
assume y Hy;
apply ExElim n _ Hy _; 
assume y' Hy';
apply lemme11 y' (lemmeSymEg _ _ (and_ed _ _ (and_eg _ _ Hy')));
assume H2;
apply ExElim n _ H2 _;
assume y Hy;
apply ExIntro n y _ _;
apply and_i _ _ (and_eg _ _ (and_eg _ _ Hy)) (and_ed _ _ Hy);
assume H;
apply ExElim n _ H _;
assume y Hy;
apply or_id;
apply ExIntro n y _ _;
apply and_i;
apply and_i;
apply and_eg _ _ Hy;
apply lemme1 o;
apply and_ed _ _ Hy;
end;