require open zf.theoriezf.logic;
require open zf.theoriezf.language;
require open zf.theoriezf.bisimilarity;
require open zf.theoriezf.injectivity;
require open zf.theoriezf.eta1;
require open zf.theoriezf.eta2;
require open zf.theoriezf.formulas;
require open zf.theoriezf.nat;
require open zf.theoriezf.language2;

opaque symbol lemma22 : Π (σ : (El nat → Graph)), Π (f : El formula), π(`∀ a, `∀ x, `∀ y', (eta (comp a σ f) x (i y') ⇔ (`∃ y, (x = i y) ∧ (eta a y y'))))
≔ begin
assume σ f;
assume a x y;
refine and_i _ _ _ _;
assume H;
refine or_e _ _ _ H _ _;
assume H1;
refine ExElim n _ H1 _ _; 
assume z Hz;
refine ExElim n _ Hz _ _; 
assume y' Hy';
refine ExIntro n z _ _;
refine and_i _ _ _ _;
refine and_eg _ _ (and_eg _ _ Hy');
refine imp_i (y = y') _ _ _;
assume H2;
refine imp_i (y' = y) _ _ _;
assume H3;
refine H3 (λ w, eta a z w) (and_ed _ _ Hy');
refine lemmaSymEg n _ _ H2;
refine lemma9 _ _ (and_ed _ _ (and_eg _ _ Hy'));
assume H4;
refine f_e _ _;
refine ExElim n _ H4 _ _; 
assume z Hz;
refine lemma11 y (and_ed _ _ (and_eg _ _ (and_eg _ _ Hz)));
assume H;
refine ExElim n _ H _ _;
assume z Hz;
refine or_ig _ _ _;
refine ExIntro n z _ _;
refine ExIntro n y _ _;
refine and_i _ _ (and_i _ _ (and_eg _ _ Hz) (refl n (i y))) (and_ed _ _ Hz);
end;

opaque symbol lemma23 : Π (σ : (El nat → Graph)), Π (f : El formula), π(`∀ a, `∀ x, (eta (comp a σ f) x o ⇔ (`∃ y, (x = i y) ∧ (eta a y (root a)) ∧ (interpretation (update σ zero (cr a y)) f))))
≔ begin
assume σ f;
assume a x;
refine and_i _ _ _ _;
assume H;
refine or_e _ _ _ H _ _;
assume H1;
refine f_e _ _;
refine ExElim n _ H1 _ _; 
assume y Hy;
refine ExElim n _ Hy _ _; 
assume y' Hy';
refine lemma11 y' (lemmaSymEg n _ _ (and_ed _ _ (and_eg _ _ Hy')));
assume H2;
refine ExElim n _ H2 _ _;
assume y Hy;
refine ExIntro n y _ _;
refine and_i _ _ _ _;
refine and_i _ _ _ _;
refine and_eg _ _ (and_eg _ _ (and_eg _ _ Hy));
refine and_ed _ _ (and_eg _ _ Hy);
refine and_ed _ _ Hy;
assume H;
refine ExElim n _ H _ _;
assume y Hy;
refine or_id _ _ _;
refine ExIntro n y _ _;
refine and_i _ _ _ _;
refine and_i _ _ _ _;
refine and_i _ _ (and_eg _ _ (and_eg _ _ Hy)) (refl n o);
refine and_ed _ _ (and_eg _ _ Hy);
refine and_ed _ _ Hy;
end;

opaque symbol lemma24 : π(`∀ x, `∀ y', (eta omega x (i y')) ⇔ (`∃ y, (x = i y) ∧ (y < y')))
≔ begin
assume x y';
refine and_i _ _ _ _;
assume H;
refine or_e _ _ _ H _ _;
assume H1;
refine ExElim n _ H1 _ _; 
assume y Hy;
refine ExElim n _ Hy _ _; 
assume z Hz;
refine ExIntro n y _ _;
refine and_i _ _ _ _;
refine and_eg _ _ (and_eg _ _ Hz);
refine imp_i (y' = z) _ _ _;
assume H2;
refine imp_i (z = y') _ _ _;
assume H3;
refine H3 (λ w, y < w) (and_ed _ _ Hz);
refine lemmaSymEg n _ _ H2;
refine lemma9 _ _ (and_ed _ _ (and_eg _ _ Hz));
assume H4;
refine f_e _ _;
refine ExElim n _ H4 _ _; 
assume y Hy;
refine lemma11 y' (and_ed _ _ (and_eg _ _ Hy));
assume H;
refine ExElim n _ H _ _;
assume y Hy;
refine or_ig _ _ _;
refine ExIntro n y _ _;
refine ExIntro n y' _ _;
refine and_i _ _ _ _;
refine and_i _ _ _ _;
refine and_eg _ _ Hy;
refine refl n (i y');
refine and_ed _ _ Hy;
end;

opaque symbol lemma25 : π(`∀ x, (eta omega x o) ⇔ (`∃ y, (x = i y) ∧ (Nat y)))
≔ begin
assume x;
refine and_i _ _ _ _;
assume H;
refine or_e _ _ _ H _ _;
assume H1;
refine f_e _ _;
refine ExElim n _ H1 _ _; 
assume y Hy;
refine ExElim n _ Hy _ _; 
assume y' Hy';
refine lemma11 y' (lemmaSymEg n _ _ (and_ed _ _ (and_eg _ _ Hy')));
assume H2;
refine ExElim n _ H2 _ _;
assume y Hy;
refine ExIntro n y _ _;
refine and_i _ _ _ _;
refine and_eg _ _ (and_eg _ _ Hy);
refine and_ed _ _ Hy;
assume H;
refine ExElim n _ H _ _;
assume y Hy;
refine or_id _ _ _;
refine ExIntro n y _ _;
refine and_i _ _ _ _;
refine and_i _ _ _ _;
refine and_eg _ _ Hy;
refine refl n o;
refine and_ed _ _ Hy;
end;

opaque symbol lemma26 : π(`∀ a, `∀ x, `∀ y', (eta (Cl a) x (i y')) ⇔ (`∃ y, (x = i y) ∧ (eta a y y')))
≔ begin
assume a x y';
refine and_i _ _ _ _;
assume H;
refine or_e _ _ _ H _ _;
assume H1;
refine ExElim n _ H1 _ _; 
assume y Hy;
refine ExElim n _ Hy _ _; 
assume z Hz;
refine ExIntro n y _ _;
refine and_i _ _ _ _;
refine and_eg _ _ (and_eg _ _ Hz);
refine imp_i (y' = z) _ _ _;
assume H2;
refine imp_i (z = y') _ _ _;
assume H3;
refine H3 (λ w, eta a y w) (and_ed _ _ Hz);
refine lemmaSymEg n _ _ H2;
refine lemma9 _ _ (and_ed _ _ (and_eg _ _ Hz));
assume H4;
refine f_e _ _;
refine ExElim n _ H4 _ _; 
assume y Hy;
refine lemma11 y' (and_ed _ _ (and_eg _ _ Hy));
assume H;
refine ExElim n _ H _ _;
assume y Hy;
refine or_ig _ _ _;
refine ExIntro n y _ _;
refine ExIntro n y' _ _;
refine and_i _ _ _ _;
refine and_i _ _ _ _;
refine and_eg _ _ Hy;
refine refl n (i y');
refine and_ed _ _ Hy;
end;

opaque symbol lemma27 : π(`∀ a, `∀ x, (eta (Cl a) x o) ⇔ (`∃ y, ((x = i y) ∧ (`∀ c : El (n arrow omicron), ((`∀ z, (eta a z (root a)) ⇒ (c z)) ∧ (`∀ z, `∀ z', (((eta a z z') ∧ (c z')) ⇒ (c z)))) ⇒ c y))))
≔ begin
assume a x;
refine and_i _ _ _ _;
assume H;
refine or_e _ _ _ H _ _;
assume H1;
refine f_e _ _;
refine ExElim n _ H1 _ _; 
assume y Hy;
refine ExElim n _ Hy _ _; 
assume y' Hy';
refine lemma11 y' (lemmaSymEg n _ _ (and_ed _ _ (and_eg _ _ Hy')));
assume H2;
refine ExElim n _ H2 _ _;
assume y Hy;
refine ExIntro n y _ _;
refine and_i _ _ (and_eg _ _ (and_eg _ _ Hy)) (and_ed _ _ Hy);
assume H;
refine ExElim n _ H _ _;
assume y Hy;
refine or_id _ _ _;
refine ExIntro n y _ _;
refine and_i _ _ _ _;
refine and_i _ _ _ _;
refine and_eg _ _ Hy;
refine refl n o;
refine and_ed _ _ Hy;
end;
